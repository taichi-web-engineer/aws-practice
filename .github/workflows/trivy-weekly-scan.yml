name: Weekly Trivy Scan

on:
  schedule:
    # JST: 日曜 00:00 (= UTC: 土曜 15:00)
    - cron: '0 15 * * 6'

  workflow_dispatch: # 手動実行を可能にする

# Securityタブ書き出しのための権限設定を追加
permissions:
  contents: read
  security-events: write

jobs:
  trivy-scan:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t aws-practice-api:${{ github.sha }} ./api

      - name: Trivy image scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'image'
          image-ref: 'aws-practice-api:${{ github.sha }}'
          format: sarif
          exit-code: '1'
          output: trivy-results.sarif

      - name: Trivy table report
        if: always()
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: image
          image-ref: aws-practice-api:${{ github.sha }}
          format: table
          exit-code: '0'
          output: trivy-table.txt

      - name: Upload table artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: trivy-table-${{ github.run_number }}
          path: trivy-table.txt
          retention-days: 30

# jobs:
#   scan:
#     name: Trivy Vulnerability Scan
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Build Docker image
#         run: |
#           docker build -t aws-practice-api:${{ github.sha }} ./api

#       - name: Run Trivy vulnerability scanner
#         uses: aquasecurity/trivy-action@master
#         with:
#           image-ref: 'aws-practice-api:${{ github.sha }}'
#           format: 'sarif'
#           output: 'trivy-results.sarif'
#           severity: 'CRITICAL,HIGH,MEDIUM,LOW'

#       - name: Upload Trivy scan results to GitHub Security tab
#         uses: github/codeql-action/upload-sarif@v3
#         with:
#           sarif_file: 'trivy-results.sarif'

#       - name: Generate Trivy scan report
#         run: |
#           # HTMLレポート用のディレクトリを作成
#           mkdir -p trivy-reports
          
#           # テキスト形式のレポートも生成
#           docker run --rm \
#             -v /var/run/docker.sock:/var/run/docker.sock \
#             -v ${{ github.workspace }}:/tmp \
#             aquasec/trivy:latest \
#             image -f table -o /tmp/trivy-reports/report.txt aws-practice-api:${{ github.sha }}
          
#           echo "詳細なスキャン結果はレポートをご覧ください。"

#       - name: Archive vulnerability reports
#         uses: actions/upload-artifact@v4
#         with:
#           name: trivy-vulnerability-reports
#           path: trivy-reports/
#           retention-days: 90

#       - name: Clean up Docker images and cache
#         if: always()  # スキャンが成功しても失敗しても必ず実行
#         run: |
#           echo "Removing Docker image used for scanning"
#           docker rmi my-docker-image:${{ github.sha }} || true
          
#           echo "Cleaning Docker cache"
#           docker system prune -af --volumes
          
#           echo "Docker cleanup completed"
#           docker images
#           docker system df